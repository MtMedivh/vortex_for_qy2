void peakPolygonThroughput_culledStrip()
{
	peakPolygonThroughput(GEOMETRY_STRIP, false, 0, CULL_FRONT);
}
void peakPolygonThroughput_culledList()
{
	peakPolygonThroughput(GEOMETRY_LIST, false, 16, CULL_FRONT);
}
void peakPolygonThroughput_halfCulledList()
{
	peakPolygonThroughput(GEOMETRY_LIST_HALF_CULLED, false, 16, CULL_BACK);
}
void peakPolygonThroughput_list()
{
	peakPolygonThroughput(GEOMETRY_LIST, false, 16, CULL_BACK);
}
void peakPolygonThroughput_uniqueVertexList()
{
	peakPolygonThroughput(GEOMETRY_LIST_3V_UNIQUE, true, 16, CULL_BACK);
}

void depthFillrate_reject()
{
	depthFillrate("Depth Reject", COMPARISON_LESS, false, true);
}
void depthFillrate_write()
{
	depthFillrate("Depth Write", COMPARISON_LESS_EQUAL, false, true);
}

void alu_2xvec4_hp()
{
	alu("vec4", "highp", "ALU test: 2xVec4 highp", "t0=t0*t0+t0;t1=t1*t1+t1;", 4);
}
void alu_2xvec4_mp()
{
	alu("vec4", "mediump", "ALU test: 2xVec4 mediump", "t0=t0*t0+t0;t1=t1*t1+t1;", 4);
}
void alu_vec4_hp()
{
	alu("vec4", "highp");
}
void alu_vec4_mp()
{
	alu("vec4", "mediump");
}
void alu_vec4_lp()
{
	alu("vec4", "lowp");
}
void alu_vec3_hp()
{
	alu("vec3", "highp");
}
void alu_vec3_mp()
{
	alu("vec3", "mediump"); 
}
void alu_vec2_hp()
{
	alu("vec2", "highp");
}
void alu_vec2_mp()
{
	alu("vec2", "mediump");
}
void alu_float_hp()
{
	alu("float", "highp");
}
void alu_float_mp()
{
	alu("float", "mediump");
}
void alu_float_lp()
{
	alu("float", "lowp");
}
void alu_sop_hp()
{
	if(intensity == 2) return; // Do not run on iOS
	alu("vec4", "highp", "ALU test: Vec4 SOP highp", "t0=(t0*t0)+(t0*t0);", 3);
}
void alu_sop_mp()
{
	if(intensity == 2) return; // Do not run on iOS
	alu("vec4", "mediump", "ALU test: Vec4 SOP mediump", "t0=(t0*t0)+(t0*t0);", 3);
}
void alu_mul_hp()
{
	alu("vec4", "highp", "ALU test: Vec4 MUL highp", "t0=(t0*t0);", 1);
}
void alu_mul_mp()
{
	alu("vec4", "mediump", "ALU test: Vec4 MUL mediump", "t0=(t0*t0);", 1);
}
void alu_rsq_hp()
{
	alu("float", "highp", "ALU test: RSQ highp", "t0=1.0/sqrt(t0);", 1);
}
void alu_rsq_mp()
{
	alu("float", "mediump", "ALU test: RSQ mediump", "t0=1.0/sqrt(t0);", 1);
}
void alu_nrm4_hp()
{
	alu("vec4", "highp", "ALU test: Vec4 NRM+MUL highp", "t0=normalize(t0*t0);t1=normalize(t1*t1);", 2);
}
void alu_nrm4_mp()
{
	alu("vec4", "mediump", "ALU test: Vec4 NRM+MUL mediump", "t0=normalize(t0*t0);t1=normalize(t1*t1);", 2);
}
void alu_nrm3_hp()
{
	alu("vec3", "highp", "ALU test: Vec3 NRM+MUL highp", "t0=normalize(t0*t0);t1=normalize(t1*t1);", 2);
}
void alu_nrm3_mp()
{
	alu("vec3", "mediump", "ALU test: Vec3 NRM+MUL mediump", "t0=normalize(t0*t0);t1=normalize(t1*t1);", 2);
}

void bandwidth_all()
{
	bandwidth();
}
void bandwidth_0tex()
{
	bandwidth(0);
}
void bandwidth_1tex()
{
	bandwidth(1);
}
void bandwidth_2tex()
{
	bandwidth(2);
}
void bandwidth_4tex()
{
	bandwidth(4);
}
void bandwidth_8tex()
{
	bandwidth(8);
}
void bandwidth_32tex()
{
	bandwidth(32);
}

void latency_memory()
{
	float DRAM = latency_aligned(true, false, 5);
	float L2 = latency_aligned(true, false, 10, 1024, 32, 1, 8, 32, 0.999999, 0.999999, "L2");
	float L1 = latency_aligned(false, true, 5);
	
	writeResult( "nanoseconds L1", L1 );
	writeResult( "nanoseconds L2-L1", L2 - L1 );
	writeResult( "nanoseconds DRAM-L2", DRAM - L2 );
}

void latency_all()
{
	if(intensity == 2) return;
	latency_random();
	latency_aligned();
	latency_aligned_L2_5();
	latency_alu_1000();
}
void latency_random_100()
{
	latency_random(true, false, 100);
}
void latency_random_250()
{
	latency_random(true, false, 250);
}
void latency_random_500()
{
	latency_random(true, false, 500);
}
void latency_random_1000()
{
	latency_random(true, false, 1000);
}
void latency_L1_100()
{
	latency_random(false, true, 100);
}
void latency_L1_250()
{
	latency_random(false, true, 250);
}
void latency_L1_500()
{
	latency_random(false, true, 500);
}
void latency_L1_1000()
{
	latency_random(false, true, 1000);
}

void latency_aligned_1()
{
	latency_aligned(true, false, 1);
}
void latency_aligned_5()
{
	latency_aligned(true, false, 5);
}
void latency_aligned_10()
{
	latency_aligned(true, false, 10);
}
void latency_aligned_100()
{
	latency_aligned(true, false, 100);
}
void latency_aligned_L1_1()
{
	latency_aligned(false, true, 1);
}
void latency_aligned_L1_5()
{
	latency_aligned(false, true, 5);
}
void latency_aligned_L1_10()
{
	latency_aligned(false, true, 10);
}
void latency_aligned_L1_100()
{
	latency_aligned(false, true, 100);
}

void latency_aligned_L2_1()
{
	latency_aligned(true, false, 1, 1024, 32, 1, 8, 32, 0.999999, 0.999999, "L2");
}
void latency_aligned_L2_5()
{
	latency_aligned(true, false, 5, 1024, 32, 1, 8, 32, 0.999999, 0.999999, "L2");
}
void latency_aligned_L2_10()
{
	latency_aligned(true, false, 10, 1024, 32, 1, 8, 32, 0.999999, 0.999999, "L2");
}
void latency_aligned_L2_100()
{
	latency_aligned(true, false, 100, 1024, 32, 1, 8, 32, 0.999999, 0.999999, "L2");
}
void latency_aligned_L2_1000()
{
	latency_aligned(true, false, 1000, 1024, 32, 1, 8, 32, 0.999999, 0.999999, "L2");
}

void latency_alu_100()
{
	latency_alu(100);
}
void latency_alu_1000()
{
	latency_alu(1000);
}
void latency_alu_10000()
{
	latency_alu(10000);
}
void latency_alu_25000()
{
	latency_alu(25000);
}
