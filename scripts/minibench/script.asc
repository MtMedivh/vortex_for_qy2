#include "script.inc"
#include "mini_raw.asc"
#include "mini_entry.asc"

string version = "1.0";
int intensity = 1;

void main()
{
	writeTestInfo();
	mini();
	//maxi();
}

void main_light()
{
	intensity = 0;
	writeTestInfo();
	mini();
}

// Tests that do nothing for debugging
void main_fake()
{
	beginTest( "Fake test" );
	endTest();
	beginTest( "Fake test" );
	endTest();	
	beginTest( "Fake test" );
	endTest();	
	beginTest( "Fake test" );
	endTest();	
	beginTest( "Fake test" );
	endTest();	
}

void main_experimental()
{
	intensity = 2;
	writeTestInfo();
	mini();
}

void peako_light()
{
	intensity = 0;
	writeTestInfo();
	peako();
}

// Only the simplest tests with easy to understand peaks
void peako()
{
	outputInfo("mode", "peako");

	visibleTextureFilltrate();
	depthFillrate_write();
	
	peakPolygonThroughput_list();
	peakPolygonThroughput_culledStrip();
	
	alu_2xvec4_hp();
	alu_2xvec4_mp();
	
	alu_float_hp();
	alu_float_mp();
}

// Standard minibench
void mini()
{
	outputInfo("mode", "mini");
	
	pushGroup( "Fillrate" );
		visibleTextureFilltrate();
		visiblePixelFilltrate();
	popGroup();
	
	 pushGroup( "Depth Fillrate" );
		depthFillrate_reject();
		depthFillrate_write();
	popGroup();
	
	pushGroup( "Polygon Throughput" );
		peakPolygonThroughput_culledStrip();
		peakPolygonThroughput_culledList();
		peakPolygonThroughput_halfCulledList();
		peakPolygonThroughput_list();
		peakPolygonThroughput_uniqueVertexList();
	popGroup();
	
	pushGroup( "ALU" );
		alu_2xvec4_hp();
		alu_2xvec4_mp();
		
		alu_vec4_hp();
		alu_vec4_mp();
		alu_vec4_lp();
		
		alu_vec3_hp();
		alu_vec3_mp();
		
		alu_vec2_hp();
		alu_vec2_mp();
		
		alu_float_hp();
		alu_float_mp();
		
		alu_sop_hp();
		alu_sop_mp();
		
		alu_mul_hp();
		alu_mul_mp();
	popGroup();
	
	pushGroup( "Bandwidth" );
		bandwidth_1tex();
		bandwidth_8tex();
	popGroup();
	
	if(intensity == 2) return;

	// Latency tests removed from minibench (will become separate suite in 1.5)
	//pushGroup( "Latency" );
		//latency_random();
		//latency_alu();
	//popGroup();
}

// Maxibench with more variations
void maxi() 
{
	outputInfo("mode", "maxi");
	
	pushGroup( "Fillrate" );
		visibleTextureFilltrate();
		visiblePixelFilltrate();
	popGroup();
	
	pushGroup( "Depth Fillrate" );
		depthFillrate("Depth Fail", COMPARISON_NEVER, false, true);
		depthFillrate("Depth Reject", COMPARISON_GREATER, false, true);
		depthFillrate("Depth Write", COMPARISON_LESS_EQUAL, false, true);
		depthFillrate("Depth Write + Color Write", COMPARISON_LESS_EQUAL, true, true);
		depthFillrate("Depth Test + Color Only", COMPARISON_LESS_EQUAL, true, false);
		depthFillrate("Depth Pass + Color Only", COMPARISON_ALWAYS, true, false);
	popGroup();
	
	pushGroup( "Polygon Throughput - 16 Quads per Column" );
		// All lists use columns of 16 triangles to fit 32x32 tiles and 64V PB Blocks
		peakPolygonThroughput(GEOMETRY_LIST, false, 16, CULL_FRONT);
		peakPolygonThroughput(GEOMETRY_LIST_HALF_CULLED, false, 16, CULL_BACK);
		peakPolygonThroughput(GEOMETRY_LIST, false, 16, CULL_BACK);
		peakPolygonThroughput(GEOMETRY_LIST, true, 16, CULL_BACK);
		peakPolygonThroughput(GEOMETRY_LIST_3V_UNIQUE, true, 16, CULL_FRONT);
		peakPolygonThroughput(GEOMETRY_LIST_3V_UNIQUE, true, 16, CULL_BACK);
		
		peakPolygonThroughput(GEOMETRY_STRIP, false, 16, CULL_FRONT);
		peakPolygonThroughput(GEOMETRY_STRIP_HALF_CULLED, false, 16, CULL_BACK);
		peakPolygonThroughput(GEOMETRY_STRIP_HALF_CULLED_OPT, false, 16, CULL_BACK);
		peakPolygonThroughput(GEOMETRY_STRIP, false, 16, CULL_BACK);
	popGroup();
  
	pushGroup( "Polygon Throughput - Full Width Columns" );
		peakPolygonThroughput(GEOMETRY_LIST, false, 0, CULL_FRONT);
		peakPolygonThroughput(GEOMETRY_LIST_HALF_CULLED, false, 0, CULL_BACK);
		peakPolygonThroughput(GEOMETRY_LIST, false, 0, CULL_BACK);
		peakPolygonThroughput(GEOMETRY_LIST, true, 0, CULL_BACK);
		peakPolygonThroughput(GEOMETRY_LIST_3V_UNIQUE, true, 0, CULL_FRONT);
		peakPolygonThroughput(GEOMETRY_LIST_3V_UNIQUE, true, 0, CULL_BACK);
		
		peakPolygonThroughput(GEOMETRY_STRIP, false, 0, CULL_FRONT);
		peakPolygonThroughput(GEOMETRY_STRIP_HALF_CULLED, false, 0, CULL_BACK);
		peakPolygonThroughput(GEOMETRY_STRIP_HALF_CULLED_OPT, false, 0, CULL_BACK);
		peakPolygonThroughput(GEOMETRY_STRIP, false, 0, CULL_BACK);  
		
		peakPolygonThroughput(GEOMETRY_LIST_DEGENERATE_GRID, false);	
		peakPolygonThroughput(GEOMETRY_STRIP_DEGENERATE_GRID, false);		
	popGroup();
	
	pushGroup( "ALU" );
		alu_2xvec4_hp();
		alu_2xvec4_mp();
		
		alu_vec4_hp();
		alu_vec4_mp();
		alu_vec4_lp();
		
		alu_vec3_hp();
		alu_vec3_mp();
		
		alu_vec2_hp();
		alu_vec2_mp();
		
		alu_float_hp();
		alu_float_mp();
		
		alu_sop_hp();
		alu_sop_mp();
		
		alu_mul_hp();
		alu_mul_mp();
		
		alu_rsq_hp();
		alu_rsq_mp();
		
		alu_nrm3_hp();
		alu_nrm3_mp();
		
		alu_nrm4_hp();
		alu_nrm4_mp();
	popGroup();
	
	pushGroup( "Latency" );
		latency_random_100();
		latency_random_1000();
		latency_L1_100();
		latency_L1_1000();
		latency_aligned_1();
		latency_aligned_10();
		latency_aligned_L1_1();
		latency_aligned_L1_10();
		
		latency_alu_100();
		latency_alu_25000();
	popGroup();
  
	pushGroup( "Bandwidth" );
		bandwidth_all();
	popGroup();
}

// Every variation of the memory benchmarks
void memory()
{
	latency_L1_100();
	latency_L1_250();
	latency_L1_500();
	latency_L1_1000();
	latency_random_100();
	latency_random_250();
	latency_random_500();
	latency_random_1000();
	latency_aligned_1();
	latency_aligned_5();
	latency_aligned_10();
	
	bandwidth_all();
}

void writeTestInfo()
{
	outputInfo("name", "minibench");
	outputInfo("version", version);
	if( intensity == 2)
		outputInfo("intensity", "experimental");
	else if(intensity == 0)
		outputInfo("intensity", "light");
	else
		outputInfo("intensity", "standard");
}
