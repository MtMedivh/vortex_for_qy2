uint32 getNbPixels()
{
	uint32 w,h;
	getResolution(w,h);
	return w*h;
}

string texture_getPreprocessor(int numTextures)
{
	string defines;
	
	defines += "#define NUM_TEXTURES " +numTextures+ ".0\n";
	
	if(numTextures >= 1) defines += "#define TEXTURE_1 OUTPUT += TEXTURE( TEX0, COORD0 );\n"; else defines += "#define TEXTURE_1 \n";
	if(numTextures >= 2) defines += "#define TEXTURE_2 OUTPUT += TEXTURE( TEX1, COORD0 );\n"; else defines += "#define TEXTURE_2 \n";
	if(numTextures >= 3) defines += "#define TEXTURE_3 OUTPUT += TEXTURE( TEX2, COORD0 );\n"; else defines += "#define TEXTURE_3 \n";
	if(numTextures >= 4) defines += "#define TEXTURE_4 OUTPUT += TEXTURE( TEX3, COORD0 );\n"; else defines += "#define TEXTURE_4 \n";
	if(numTextures >= 5) defines += "#define TEXTURE_5 OUTPUT += TEXTURE( TEX4, COORD0 );\n"; else defines += "#define TEXTURE_5 \n";
	if(numTextures >= 6) defines += "#define TEXTURE_6 OUTPUT += TEXTURE( TEX5, COORD0 );\n"; else defines += "#define TEXTURE_6 \n";
	if(numTextures >= 7) defines += "#define TEXTURE_7 OUTPUT += TEXTURE( TEX6, COORD0 );\n"; else defines += "#define TEXTURE_7 \n";
	if(numTextures >= 8) defines += "#define TEXTURE_8 OUTPUT += TEXTURE( TEX7, COORD0 );\n"; else defines += "#define TEXTURE_8 \n";
	
	if(numTextures >= 16) defines += "#define TEXTURE_16 OUTPUT += Texture8(COORD1);\n"; else defines += "#define TEXTURE_16 \n";
	if(numTextures >= 32) defines += "#define TEXTURE_32 OUTPUT += Texture8(COORD2); OUTPUT += Texture8(COORD3);\n"; else defines += "#define TEXTURE_32 \n";
	if(numTextures >= 48) defines += "#define TEXTURE_48 OUTPUT += Texture8(COORD4); OUTPUT += Texture8(COORD5);\n"; else defines += "#define TEXTURE_48 \n";
	if(numTextures >= 64) defines += "#define TEXTURE_64 OUTPUT += Texture8(COORD6); OUTPUT += Texture8(COORD7);\n"; else defines += "#define TEXTURE_64 \n";
	
	if(numTextures >= 16) defines += "#define MORE_TEXCOORDS true\n";
	
	return defines;
}

void peakPolygonThroughput(GEOMETRY_TYPE geometryType, bool indices32 = false, int quadsPerColumn=0, CULL_MODE cullMode=CULL_BACK)
{
	Geometry@ g0 = createGeometry(ATTRIBUTE_POSITION3, 0, DATA_FORMAT_R32G32_FLOAT, indices32);
	
	string testName;
	if(geometryType == GEOMETRY_LIST && cullMode == CULL_FRONT) testName = "Peak Polygon List Throughput (100% Culled)";
	else if(geometryType == GEOMETRY_LIST_HALF_CULLED) testName = "Peak Polygon List Throughput (50% Culled)";
	else if(geometryType == GEOMETRY_LIST && indices32 == false) testName = "Peak Polygon List Throughput (0% Culled)";
	else if(geometryType == GEOMETRY_LIST && indices32 == true) testName = "Peak Polygon List Throughput (0% Culled + 32b Indices)";
	else if(geometryType == GEOMETRY_LIST_3V_UNIQUE && cullMode == CULL_FRONT) testName = "Peak Polygon List Throughput (100% Culled + 32b Indices + 3V/Tri)";
	else if(geometryType == GEOMETRY_LIST_3V_UNIQUE) testName = "Peak Polygon List Throughput (0% Culled + 32b Indices + 3V/Tri)";
	
	else if(geometryType == GEOMETRY_STRIP && cullMode == CULL_FRONT) testName = "Peak Polygon Strip Throughput (100% Culled)";
	else if(geometryType == GEOMETRY_STRIP_HALF_CULLED) testName = "Peak Polygon Strip Throughput (50% Culled)";
	else if(geometryType == GEOMETRY_STRIP_HALF_CULLED_OPT) testName = "Peak Polygon Strip Throughput (50% Special)";
	else if(geometryType == GEOMETRY_STRIP) testName = "Peak Polygon Strip Throughput (0% Culled)";
	else if(geometryType == GEOMETRY_LIST_DEGENERATE_GRID) testName = "Peak Polygon List Throughput (Degenerate)";
	else if(geometryType == GEOMETRY_STRIP_DEGENERATE_GRID) testName = "Peak Polygon Strip Throughput (Degenerate)";
	
	g0.addQuad( geometryType, 0.0f, 0.0f, 0.5f, 0.25f, 256, 128, 0.5f, quadsPerColumn, 1 );
	
	beginTest( testName );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( "shader", g0, cullMode, DEFAULT_BLEND_OPAQUE ), 128 );

	endTest();
	writeResult("mega_tris_per_second", 128.0 * g0.getNumTotalTriangles() * getLastTestFPS() / (1000.0 * 1000.0));
}


void qy2_ppp_cull_list_16draw()
{
        GEOMETRY_TYPE geometryType = GEOMETRY_LIST;
        bool indices32 = false;
        int quadsPerColumn = 0;
        CULL_MODE cullMode = CULL_FRONT;
        
	Geometry@ g0 = createGeometry(ATTRIBUTE_POSITION3, 0, DATA_FORMAT_R32G32_FLOAT, indices32);
	
	string testName;
	if(geometryType == GEOMETRY_LIST && cullMode == CULL_FRONT) testName = "Peak Polygon List Throughput (100% Culled)";
	else if(geometryType == GEOMETRY_LIST_HALF_CULLED) testName = "Peak Polygon List Throughput (50% Culled)";
	else if(geometryType == GEOMETRY_LIST && indices32 == false) testName = "Peak Polygon List Throughput (0% Culled)";
	else if(geometryType == GEOMETRY_LIST && indices32 == true) testName = "Peak Polygon List Throughput (0% Culled + 32b Indices)";
	else if(geometryType == GEOMETRY_LIST_3V_UNIQUE && cullMode == CULL_FRONT) testName = "Peak Polygon List Throughput (100% Culled + 32b Indices + 3V/Tri)";
	else if(geometryType == GEOMETRY_LIST_3V_UNIQUE) testName = "Peak Polygon List Throughput (0% Culled + 32b Indices + 3V/Tri)";
	
	else if(geometryType == GEOMETRY_STRIP && cullMode == CULL_FRONT) testName = "Peak Polygon Strip Throughput (100% Culled)";
	else if(geometryType == GEOMETRY_STRIP_HALF_CULLED) testName = "Peak Polygon Strip Throughput (50% Culled)";
	else if(geometryType == GEOMETRY_STRIP_HALF_CULLED_OPT) testName = "Peak Polygon Strip Throughput (50% Special)";
	else if(geometryType == GEOMETRY_STRIP) testName = "Peak Polygon Strip Throughput (0% Culled)";
	else if(geometryType == GEOMETRY_LIST_DEGENERATE_GRID) testName = "Peak Polygon List Throughput (Degenerate)";
	else if(geometryType == GEOMETRY_STRIP_DEGENERATE_GRID) testName = "Peak Polygon Strip Throughput (Degenerate)";
	
	g0.addQuad( geometryType, 0.0f, 0.0f, 0.5f, 0.25f, 64, 32, 0.5f, quadsPerColumn, 1 );
	
	beginTest( testName );
	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( "shader", g0, cullMode, DEFAULT_BLEND_OPAQUE ), 16 );
	endTest();
}

void qy2_ppp_cull_strip_16draw()
{
        GEOMETRY_TYPE geometryType = GEOMETRY_STRIP;
        bool indices32 = false;
        int quadsPerColumn = 0;
        CULL_MODE cullMode = CULL_FRONT;
        
	Geometry@ g0 = createGeometry(ATTRIBUTE_POSITION3, 0, DATA_FORMAT_R32G32_FLOAT, indices32);
	
	string testName;
	if(geometryType == GEOMETRY_LIST && cullMode == CULL_FRONT) testName = "Peak Polygon List Throughput (100% Culled)";
	else if(geometryType == GEOMETRY_LIST_HALF_CULLED) testName = "Peak Polygon List Throughput (50% Culled)";
	else if(geometryType == GEOMETRY_LIST && indices32 == false) testName = "Peak Polygon List Throughput (0% Culled)";
	else if(geometryType == GEOMETRY_LIST && indices32 == true) testName = "Peak Polygon List Throughput (0% Culled + 32b Indices)";
	else if(geometryType == GEOMETRY_LIST_3V_UNIQUE && cullMode == CULL_FRONT) testName = "Peak Polygon List Throughput (100% Culled + 32b Indices + 3V/Tri)";
	else if(geometryType == GEOMETRY_LIST_3V_UNIQUE) testName = "Peak Polygon List Throughput (0% Culled + 32b Indices + 3V/Tri)";
	
	else if(geometryType == GEOMETRY_STRIP && cullMode == CULL_FRONT) testName = "Peak Polygon Strip Throughput (100% Culled)";
	else if(geometryType == GEOMETRY_STRIP_HALF_CULLED) testName = "Peak Polygon Strip Throughput (50% Culled)";
	else if(geometryType == GEOMETRY_STRIP_HALF_CULLED_OPT) testName = "Peak Polygon Strip Throughput (50% Special)";
	else if(geometryType == GEOMETRY_STRIP) testName = "Peak Polygon Strip Throughput (0% Culled)";
	else if(geometryType == GEOMETRY_LIST_DEGENERATE_GRID) testName = "Peak Polygon List Throughput (Degenerate)";
	else if(geometryType == GEOMETRY_STRIP_DEGENERATE_GRID) testName = "Peak Polygon Strip Throughput (Degenerate)";
	
	g0.addQuad( geometryType, 0.0f, 0.0f, 0.5f, 0.25f, 64, 32, 0.5f, quadsPerColumn, 1 );
	
	beginTest( testName );
	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( "shader", g0, cullMode, DEFAULT_BLEND_OPAQUE ), 16 );
	endTest();
}

void depthFillrate(string testName, COMPARISON_FUNC depthmode, bool writeColour = false, bool writeDepth = true)
{
	Geometry@ g0 = createFullscreen(ATTRIBUTE_POSITION3, 0, DATA_FORMAT_R32G32_FLOAT, false, 32);
	Pipeline@ p0 = createPipelineFromFile( "shader", "shader" );
	
	RasterizerState@ rast = createRasterizerState(CULL_BACK);
	BlendState@ blend = createBlendState( writeColour ? COLOR_WRITE_ENABLE_ALL : COLOR_WRITE_ENABLE(0) );
	
	// Create the standard layer with specified depth behaviour
	Layer@ layer = createLayer(p0, g0);
	layer.attachRasterizerState( rast );
	layer.attachBlendState( blend );
	layer.attachDepthStencilState( createDepthStencilState(depthmode, writeDepth ? DEPTH_WRITE_MASK_ALL : DEPTH_WRITE_MASK_ZERO) );
	
	beginTest( testName );
		clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
		renderLayer( layer, 32 );
	endTest();	
	
	writeResult("mega_pixels_per_second", 1025 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0));
	writeResult("mega_pixels_per_second_without_clear", 1024 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0));
}


void qy2_isp_depth_reject_8draw()
{
	Geometry@ g0 = createFullscreen(ATTRIBUTE_POSITION3, 0, DATA_FORMAT_R32G32_FLOAT, false, 1);
	Pipeline@ p0 = createPipelineFromFile( "shader", "shader" );
	
	RasterizerState@ rast = createRasterizerState(CULL_BACK);
	BlendState@ blend = createBlendState( COLOR_WRITE_ENABLE(0) );
	
	// Create the standard layer with specified depth behaviour
	Layer@ layer = createLayer(p0, g0);
	layer.attachRasterizerState( rast );
	layer.attachBlendState( blend );
	layer.attachDepthStencilState( createDepthStencilState(COMPARISON_LESS, DEPTH_WRITE_MASK_ALL ) );
	
	beginTest( "depth fill rate reject perf test , loop 8") ;
		clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
		renderLayer( layer, 8 );
	endTest();	
}

void visiblePixelFilltrate()
{
	// visible pixel fillrate: blending (no depth)
	Pipeline@ p = createPipelineFromFile( "shader", "shader" );
	Geometry@ g0 = createFullscreen(ATTRIBUTE_POSITION3, 0, DATA_FORMAT_R32G32_FLOAT, false);
	beginTest( "Pixel Fillrate" );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( p, g0, CULL_BACK, DEFAULT_BLEND_OPAQUE, DEPTH_PASS_ONLY ), 1 );
	renderLayer( createDefaultLayer( p, g0, CULL_BACK, DEFAULT_BLEND_ADD, DEPTH_PASS_ONLY ), 255 );
	
	endTest();	
	writeResult("mega_pixels_per_second", 256 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0));
}


void qy2_psb_blend_8draw()
{
        // visible pixel fillrate: blending (no depth)
        Pipeline@ p = createPipelineFromFile( "shader", "shader" );
        Geometry@ g0 = createFullscreen(ATTRIBUTE_POSITION3, 0, DATA_FORMAT_R32G32_FLOAT, false);
        beginTest( "Pixel Fillrate" );

        clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
        renderLayer( createDefaultLayer( p, g0, CULL_BACK, DEFAULT_BLEND_OPAQUE, DEPTH_PASS_ONLY ), 1 );
        renderLayer( createDefaultLayer( p, g0, CULL_BACK, DEFAULT_BLEND_ADD, DEPTH_PASS_ONLY ), 7 );

        endTest();
        writeResult("mega_pixels_per_second", 256 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0));
}



void visibleTextureFilltrate()
{
	// visible pixel fillrate: blending (no depth)
	Pipeline@ p = createPipelineFromFile( "shader_textures", "shader_textures", texture_getPreprocessor(4) );
	Geometry@ g0 = createFullscreen(ATTRIBUTE_POSITION3, 1, DATA_FORMAT_R32G32_FLOAT, false, 16);
	
	array<Texture@> tex(4);
	for( int i = 0; i < 4; i++ )
		@tex[i] = generateRandomTexture(4, 4, true, DATA_FORMAT_R8G8B8A8_UNORM);
	beginTest( "Texture Fillrate" );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( p, g0, CULL_BACK, DEFAULT_BLEND_ADD, DEPTH_PASS_ONLY, tex[0], tex[1], tex[2], tex[3] ), 8 ); /* is actually 128 with the geometry */
	endTest();	
	writeResult("mega_texels_per_second", 128 * 4 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0));
}

void qy2_tpu_bilinear_4texture_unorm_rgba8_size4x4_4draw()
{
        // visible pixel fillrate: blending (no depth)
        Pipeline@ p = createPipelineFromFile( "shader_textures", "shader_textures", texture_getPreprocessor(4) );
        Geometry@ g0 = createFullscreen(ATTRIBUTE_POSITION3, 1, DATA_FORMAT_R32G32_FLOAT, false, 4);

        array<Texture@> tex(4);
        for( int i = 0; i < 4; i++ )
                @tex[i] = generateRandomTexture(4, 4, true, DATA_FORMAT_R8G8B8A8_UNORM);
        beginTest( "Texture Fillrate" );

        clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
        renderLayer( createDefaultLayer( p, g0, CULL_BACK, DEFAULT_BLEND_ADD, DEPTH_PASS_ONLY, tex[0], tex[1], tex[2], tex[3] ), 1 ); /* is actually 128 with the geometry */
        endTest();
        writeResult("mega_texels_per_second", 128 * 4 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0));
}

void alu(string dataType, string precision, string name="", string operation="t0 = (t0*t0) + t0;", float baseflops=2.0)
{
	uint repetitions = 100;
	if(intensity == 0)
		repetitions = 30;
	if(intensity == 2)
		repetitions = 200;
		
	string preprocessor = alu_getPreprocessor(dataType, precision, operation, repetitions, baseflops);
	Pipeline@ p = createPipelineFromFile( "alu", "alu", preprocessor );
	
	Geometry@ g0 = createFullscreen(ATTRIBUTE_POSITION3, 1, DATA_FORMAT_R32G32B32A32_FLOAT, false, 16);

	beginTest( name != "" ? name : ("ALU test: " + dataType + " " + precision), 0 );
	
	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( p, g0, CULL_BACK, DEFAULT_BLEND_ADD, DEPTH_PASS_ONLY ), 1 );	/* actually 16 from the geometry */
	
	endTest();	
	
	double flops = alu_getDataSize(dataType) * repetitions * baseflops;
	
	writeResult( "GFlops/s", 16 * flops * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0 * 1000.0) );
}

void qy2_usc_float_hp_100fma()
{
        uint repetitions = 100;
        string dataType="float";
        string precision="highp";
        string name="";
        string operation="t0 = (t0*t0) + t0;";
        float baseflops=2.0;

        string preprocessor = alu_getPreprocessor(dataType, precision, operation, repetitions, baseflops);
        Pipeline@ p = createPipelineFromFile( "alu", "alu", preprocessor );

        Geometry@ g0 = createFullscreen(ATTRIBUTE_POSITION3, 1, DATA_FORMAT_R32G32B32A32_FLOAT, false, 1);

        beginTest( " alu float hp perf test, 100 FMA");

        clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
        renderLayer( createDefaultLayer( p, g0, CULL_BACK, DEFAULT_BLEND_ADD, DEPTH_PASS_ONLY ), 1 );

        endTest();
}


void qy2_usc_float_hp_20rsq()
{
  	uint repetitions = 20;
        string dataType="float";
        string precision="highp";
        string name="";
        string operation="t0=1.0/sqrt(t0);";
        float baseflops=1.0;	
	
	string preprocessor = alu_getPreprocessor(dataType, precision, operation, repetitions, baseflops);
	Pipeline@ p = createPipelineFromFile( "alu", "alu", preprocessor );
	
	Geometry@ g0 = createFullscreen(ATTRIBUTE_POSITION3, 1, DATA_FORMAT_R32G32B32A32_FLOAT, false, 1);

	beginTest( " alu vec4 hp perf test, 100 rsq");
	
	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( p, g0, CULL_BACK, DEFAULT_BLEND_ADD, DEPTH_PASS_ONLY ), 1 );	
	
	endTest();
}

string alu_getPreprocessor(string dataType, string precision, string process, uint iterations, float baseflops)
{
	string defines;
	defines += "#define PRECISION "+precision+"\n";
	defines += "#define TYPE "+dataType+"\n";
	
	if(getAPI() == "OGL32" || getAPI() == "D3D11")
	{
		print("Warning: precision qualifiers are ignored in desktop APIs");
	}
	
	string output;
	string suffix;
	if(baseflops > 2)
	{
		output = "vec4(t0+t1)";
		suffix = "xyzw";
	}
	else if(dataType == "float")
	{
		output = "vec4(t0,t0,t0,t0)";
		suffix = "x";
	}
	else if(dataType == "vec2")
	{
		output = "t0.xyxy";
		suffix = "xy";
	}
	else if(dataType == "vec3")
	{
		output = "t0.xyzx";
		suffix = "xyz";
	}
	else
	{
		output = "t0;";	
		suffix = "xyzw";
	}
	defines += "#define OUTPUT "+output+"\n";
	defines += "#define SUFFIX "+suffix+"\n";
	
	uint32 loopCount = iterations;
	if( (iterations/4)*4 == iterations ) // check if divisible by n
	{
		// add another level of indirection in the preprocessor (to get past some compiler bugs)
		defines += "#define PR_PCK " + process + " " + process + " " + process + " " + process + "\n";
		defines += "#define PR_IT PR_PCK \n";
		loopCount /= 4;
	}
	else
	{
		defines += "#define PR_IT "+process+"\n";
	}
	
	string workLoop;
	for(uint i=0; i<loopCount; i++)
		workLoop += "PR_IT ";
	defines += "#define PROCESS "+workLoop+"\n";
	
	return defines;
}

uint alu_getDataSize(string dataType)
{
	if(dataType == "float")
		return 1;
	else if(dataType == "vec2")
		return 2;
	else if(dataType == "vec3")
		return 3;
	else
		return 4;
}

void TPU_TCU_L0_MISS_LLC_MISS() {
	array<Texture@> tex(8);
	
	int width, height;
	getResolution(width, height);
	Geometry@ geom = createFullscreen(ATTRIBUTE_POSITION4, 1);
	
	int numTextures = 8;
	
	for( int i = 0; i < numTextures; i++ ) {
		@tex[i] = generateRandomTexture(2048, 1024, false, DATA_FORMAT_R8G8B8A8_UNORM);
	}

        Pipeline@ pipeline = createPipelineFromFile( "shader_textures", "shader_textures", texture_getPreprocessor(8));
	SamplerState@ sampler = createSamplerState( FILTER_MIN_MAG_LINEAR_MIP_NONE, TEXTURE_ADDRESS_WRAP );
	Layer@ opaqueLayer = createDefaultLayer( pipeline, geom, CULL_NONE, DEFAULT_BLEND_OPAQUE, DEPTH_PASS_ONLY,
						 tex[0], tex[1], tex[2], tex[3], tex[4], tex[5], tex[6], tex[7],
						 sampler);
										   
	beginTest( "Bandwidth with 8 random texture for perf test");

	clear();															   
	renderLayer( opaqueLayer );
	endTest();
}	

void TPU_TCU_L0_MISS_LLC_HIT() {
	array<Texture@> tex(8);
	
	int width, height;
	getResolution(width, height);
	Geometry@ geom = createFullscreen(ATTRIBUTE_POSITION4, 1);
	
	int numTextures = 8;
	
	for( int i = 0; i < numTextures; i++ ) {
		@tex[i] = generateRandomTexture(128, 64, false, DATA_FORMAT_R8G8B8A8_UNORM);
	}

        Pipeline@ pipeline = createPipelineFromFile( "shader_textures", "shader_textures", texture_getPreprocessor(8));
	SamplerState@ sampler = createSamplerState( FILTER_MIN_MAG_LINEAR_MIP_NONE, TEXTURE_ADDRESS_WRAP );
	Layer@ opaqueLayer = createDefaultLayer( pipeline, geom, CULL_NONE, DEFAULT_BLEND_ADD, DEPTH_PASS_ONLY,
						 tex[0], tex[1], tex[2], tex[3], tex[4], tex[5], tex[6], tex[7],
						 sampler);
										   
	beginTest( "Bandwidth with 8 random texture for perf test");

	clear();															   
	renderLayer( opaqueLayer,5 );
	endTest();
}
	
void bandwidth(int texnum = -1) {
	array<Texture@> tex(8);
	
	int width, height;
	getResolution(width, height);
	Geometry@ geom = createFullscreen(ATTRIBUTE_POSITION4, 1);
	
	int numTextures = 8;
	if(texnum >= 0 && texnum <= 8)
		numTextures = texnum;
	
	// Test both random and black textures to check for framebuffer compression
	for( int d = 0; d < 2; d++ ) {

		for( int i = 0; i < numTextures; i++ ) {
			switch( d ) {
				case 0: @tex[i] = generateRandomTexture(width, height, false, DATA_FORMAT_R8G8B8A8_UNORM); break;
				case 1: @tex[i] = generateBlackTexture(width, height, false, DATA_FORMAT_R8G8B8A8_UNORM); break;
			}
		}

		for( int i = 0; i <= 32; i++ ) {
		
			// Above 8 only support 16/32/64 textures by increasing the number of texcoords on the same 8 textures
			if(i == 9) i = 16;
			if(i == 17) i = 32;
			if(i == 33) i = 64;
			
			if(texnum >= 0 && i > texnum)
				break;
			if(texnum >= 0 && i != texnum)
				continue;
		
			Pipeline@ pipeline = createPipelineFromFile( "shader_textures", "shader_textures", texture_getPreprocessor(i));
			SamplerState@ sampler = createSamplerState( FILTER_MIN_MAG_LINEAR_MIP_NONE, TEXTURE_ADDRESS_WRAP );
			Layer@ opaqueLayer = createDefaultLayer( pipeline, geom, CULL_NONE, DEFAULT_BLEND_OPAQUE, DEPTH_PASS_ONLY,
													 tex[0], tex[1], tex[2], tex[3], tex[4], tex[5], tex[6], tex[7],
													 sampler);
										   
			beginTest( "Bandwidth with " + (i) + " " + ((d<1) ? "Random" : "Black") + " Textures");

			clear();															   
			renderLayer( opaqueLayer );

			endTest();
			writeResult("MTexel/s", float(i) * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0));
			writeResult("GB/s", float(i+1) * 4 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0 * 1000.0));
		}
	}
}	

void latency_random(bool DRAM = true, bool L1 = true, float numContinues = 0) {
	// D3D11 9.3 not supported because of loop unrolling and number of instructions
	if( getAPI()=="D3D11" && getFeatureLevel() == "9_3" )
	{
		print("Warning: Latency test does not support D3D11-9.3");
		return;
	}
	
	if(numContinues == 0)
	{
		if(intensity == 0) numContinues = 85;
		else if(intensity == 2) numContinues = 200;
		else numContinues = 500;
	}

	int width, height;
	getResolution( width, height );

	float numRestarts = 1;
	float numLayers = 1;
	float numLoads = 100;
	float numFetches = numContinues * numRestarts * numLayers * numLoads;

	Geometry@ geom_noUV = createGeometry(ATTRIBUTE_POSITION3, 0, DATA_FORMAT_R32G32_FLOAT, false);
	geom_noUV.addQuad(GEOMETRY_LIST, 0.0f, 0.0f, 1.0f/float(width), 1.0f/float(height), 1, 1, 1, 0, 1);	
	
	Pipeline@ pipe = createPipelineFromFile( "shader_latency", "shader_latency" );
	ConstantBuffer @cb0 = createConstantBuffer( 2 );
	cb0.set( 0, numContinues, 0.f, 0.f, 0.f );
	cb0.set( 1, numRestarts, 0.f, 0.f, 0.f );
	float bigtex_time, minitex_time;
	
	if(DRAM)
	{
		// ----------------------
		// DRAM+MADD Latency Test
		// ----------------------
		Texture@ tex = generateRandomTexture( 4096, 4096, false, DATA_FORMAT_R8G8B8A8_UNORM );
		Layer@ layer = createDefaultLayer( pipe, geom_noUV, CULL_NONE, DEFAULT_BLEND_ADD, DEPTH_PASS_ONLY );
		layer.attachTexture( 0, tex, createSamplerState( FILTER_MIN_MAG_POINT_MIP_NONE, TEXTURE_ADDRESS_WRAP ) );
		layer.attachPSConstantBuffer( 0, cb0 );

		beginTest( "DRAM + MADD Latency (" + numContinues + "x)" );
		clear();
		renderLayer( layer, int(numLayers) );
		endTest();
		
		bigtex_time = (getLastTestTime() * 1000.0 * 1000.0 * 1000.0 / getLastTestNumFrames()) / numFetches;
		writeResult( "nanoseconds", bigtex_time );
	}
	
	if(L1)
	{
		// ----------------------
		// L1+MADD Latency Test
		// ----------------------
		// Version with 4x4 texture to get 100% L1 cache hits (i.e. zero memory latency)
		// We subtract this time to the bigtex one to get the actual DRAM controller latency

		Layer@ smallLayer = createDefaultLayer( pipe, geom_noUV, CULL_NONE, DEFAULT_BLEND_ADD, DEPTH_PASS_ONLY );
		Texture@ smallTex = generateRandomTexture( 4, 4, false, DATA_FORMAT_R8G8B8A8_UNORM );
		smallLayer.attachTexture( 0, smallTex, createSamplerState( FILTER_MIN_MAG_POINT_MIP_NONE, TEXTURE_ADDRESS_WRAP ) );
		smallLayer.attachPSConstantBuffer( 0, cb0 );

		beginTest( "L1 + MADD Latency (" + numContinues + "x)" );
		clear();
		renderLayer( smallLayer, int(numLayers) );
		endTest();
		
		minitex_time = (getLastTestTime() * 1000.0 * 1000.0 * 1000.0 / getLastTestNumFrames()) / numFetches;
		writeResult( "nanoseconds", minitex_time );
	}
	if(DRAM && L1)
	{
		writeResult( "nanoseconds DRAM-L1", bigtex_time - minitex_time ); 
	}
}

void latency_TCU_L1( )
{
        float numRestarts = 500;
        int texwidth = 64;
        int texheight = 64;
        int numLayers = 1;
        int incX = 1;
        int incY = 1;
        float maxX = 0.999999;
        float maxY = 0.999999;
        string memtext = "DRAM";

	int width, height;
	getResolution( width, height );
	
	float incrementX = (1.0/float(texwidth))*float(incX);
	float incrementY = (1.0/float(texheight))*float(incY);

	Geometry@ geom_noUV = createGeometry(ATTRIBUTE_POSITION3, 0, DATA_FORMAT_R32G32_FLOAT, false);
	geom_noUV.addQuad(GEOMETRY_LIST, 0.0f, 0.0f, 1.0f/float(width), 1.0f/float(height), 1, 1, 1, 0, 1);	
	
	Pipeline@ pipe = createPipelineFromFile( "shader_latency_aligned", "shader_latency_aligned" );
	ConstantBuffer @cb0 = createConstantBuffer( 2 );
	cb0.set( 0, numRestarts, 0.f, 0.f, 0.f );
	cb0.set( 1, incrementX, incrementY, maxX, maxY );
	float bigtex_time, minitex_time;
	
	Texture@ tex = generateBlackTexture( texwidth, texheight, false, DATA_FORMAT_R8G8B8A8_UNORM );
	Layer@ layer = createDefaultLayer( pipe, geom_noUV, CULL_NONE, DEFAULT_BLEND_ADD, DEPTH_PASS_ONLY );
	layer.attachTexture( 0, tex, createSamplerState( FILTER_MIN_MAG_POINT_MIP_NONE, TEXTURE_ADDRESS_WRAP ) );
	layer.attachPSConstantBuffer( 0, cb0 );

	beginTest( "latency SLC perf test" );
	clear();
	renderLayer( layer, numLayers );
	endTest();
}

void latency_SLC( )
{
        float numRestarts = 1;
        int texwidth = 4096;
        int texheight = 2048;
        int numLayers = 1;
        int incX = 2;
        int incY = 2;
        float maxX = 0.999999;
        float maxY = 0.999999;
        string memtext = "DRAM";

	int width, height;
	getResolution( width, height );
	
	float incrementX = (1.0/float(texwidth))*float(incX);
	float incrementY = (1.0/float(texheight))*float(incY);

	Geometry@ geom_noUV = createGeometry(ATTRIBUTE_POSITION3, 0, DATA_FORMAT_R32G32_FLOAT, false);
	geom_noUV.addQuad(GEOMETRY_LIST, 0.0f, 0.0f, 1.0f/float(width), 1.0f/float(height), 1, 1, 1, 0, 1);	
	
	Pipeline@ pipe = createPipelineFromFile( "shader_latency_aligned", "shader_latency_aligned" );
	ConstantBuffer @cb0 = createConstantBuffer( 2 );
	cb0.set( 0, numRestarts, 0.f, 0.f, 0.f );
	cb0.set( 1, incrementX, incrementY, maxX, maxY );
	float bigtex_time, minitex_time;
	
	Texture@ tex = generateBlackTexture( texwidth, texheight, false, DATA_FORMAT_R8G8B8A8_UNORM );
	Layer@ layer = createDefaultLayer( pipe, geom_noUV, CULL_NONE, DEFAULT_BLEND_ADD, DEPTH_PASS_ONLY );
	layer.attachTexture( 0, tex, createSamplerState( FILTER_MIN_MAG_POINT_MIP_NONE, TEXTURE_ADDRESS_WRAP ) );
	layer.attachPSConstantBuffer( 0, cb0 );

	beginTest( "latency SLC perf test" );
	clear();
	renderLayer( layer, numLayers );
	endTest();
}


float latency_aligned(bool DRAM = true, bool L1 = true, float numRestarts = 0, int texwidth = 1024, int texheight = 1024, int numLayers = 1, int incX = 8, int incY = 8, float maxX = 0.999999, float maxY = 0.999999, string memtext = "DRAM") {
	// D3D11 9.3 not supported because of loop unrolling and number of instructions
	if( getAPI()=="D3D11" && getFeatureLevel() == "9_3" )
	{
		print("Warning: Latency test does not support D3D11-9.3");
		return 0.0;
	}
	
	if(numRestarts == 0)
	{
		if(intensity == 0) numRestarts = 1;
		else numRestarts = 5;
	}

	int width, height;
	getResolution( width, height );
	
	float incrementX = (1.0/float(texwidth))*float(incX);
	float incrementY = (1.0/float(texheight))*float(incY);
	float numFetches = numRestarts * float(numLayers) * (float(texwidth)/float(incX)) * (float(texheight)/float(incY));

	Geometry@ geom_noUV = createGeometry(ATTRIBUTE_POSITION3, 0, DATA_FORMAT_R32G32_FLOAT, false);
	geom_noUV.addQuad(GEOMETRY_LIST, 0.0f, 0.0f, 1.0f/float(width), 1.0f/float(height), 1, 1, 1, 0, 1);	
	
	Pipeline@ pipe = createPipelineFromFile( "shader_latency_aligned", "shader_latency_aligned" );
	ConstantBuffer @cb0 = createConstantBuffer( 2 );
	cb0.set( 0, numRestarts, 0.f, 0.f, 0.f );
	cb0.set( 1, incrementX, incrementY, maxX, maxY );
	float bigtex_time, minitex_time;
	
	if(DRAM)
	{
		// ----------------------
		// DRAM+MADD Latency Test
		// ----------------------
		Texture@ tex = generateBlackTexture( texwidth, texheight, false, DATA_FORMAT_R8G8B8A8_UNORM );
		Layer@ layer = createDefaultLayer( pipe, geom_noUV, CULL_NONE, DEFAULT_BLEND_ADD, DEPTH_PASS_ONLY );
		layer.attachTexture( 0, tex, createSamplerState( FILTER_MIN_MAG_POINT_MIP_NONE, TEXTURE_ADDRESS_WRAP ) );
		layer.attachPSConstantBuffer( 0, cb0 );

		beginTest( memtext + " + MADD Aligned Latency (" + numRestarts + "x @ " + texwidth + "x" + texheight + ")" );
		clear();
		renderLayer( layer, numLayers );
		endTest();
		
		bigtex_time = (getLastTestTime() * 1000.0 * 1000.0 * 1000.0 / getLastTestNumFrames()) / numFetches;
		writeResult( "nanoseconds", bigtex_time );
	}
	
	if(L1)
	{
		// ----------------------
		// L1+MADD Latency Test
		// ----------------------
		// Version with 4x4 texture to get 100% L1 cache hits (i.e. zero memory latency)
		// We subtract this time to the bigtex one to get the actual DRAM controller latency

		Layer@ smallLayer = createDefaultLayer( pipe, geom_noUV, CULL_NONE, DEFAULT_BLEND_ADD, DEPTH_PASS_ONLY );
		Texture@ smallTex = generateBlackTexture( 4, 4, false, DATA_FORMAT_R8G8B8A8_UNORM );
		smallLayer.attachTexture( 0, smallTex, createSamplerState( FILTER_MIN_MAG_POINT_MIP_NONE, TEXTURE_ADDRESS_WRAP ) );
		smallLayer.attachPSConstantBuffer( 0, cb0 );

		beginTest( "L1 + MADD Aligned Latency (" + numRestarts + "x)" );
		clear();
		renderLayer( smallLayer, numLayers );
		endTest();
		
		minitex_time = (getLastTestTime() * 1000.0 * 1000.0 * 1000.0 / getLastTestNumFrames()) / numFetches;
		writeResult( "nanoseconds", minitex_time );
	}
	if(DRAM && L1)
	{
		writeResult( "nanoseconds " + memtext + "-L1 Aligned", bigtex_time - minitex_time );
	}
	
	if(DRAM)	return bigtex_time;
	if(L1) return minitex_time;
	return 0.0;
}

// 10000*100 Scalar MADDs on a single pixel
void latency_alu(uint32 innerLoop = 0) {
	// D3D11 9.3 not supported because of loop unrolling and number of instructions
	if( getAPI()=="D3D11" && getFeatureLevel() == "9_3" )
	{
		print("Warning: Latency test does not support D3D11-9.3");
		return;
	}
	
	if(innerLoop == 0)
	{
		if(intensity == 0) innerLoop = 500;
		else if(intensity == 2) innerLoop = 5000;
		else innerLoop = 10000;
	}

	int width, height;
	getResolution( width, height );
	
	float numLayers = 1;

	Geometry@ geom = createGeometry(ATTRIBUTE_POSITION3, 1, DATA_FORMAT_R32G32_FLOAT, false);
	geom.addQuad(GEOMETRY_LIST, 0.0f, 0.0f, 1.0f/float(width), 1.0f/float(height), 1, 1, 1, 0, 1);
	
	string preproc = "#define INNER_LOOP "+innerLoop+"\n";

	Pipeline@ pipe = createPipelineFromFile( "shader_latency_madd", "shader_latency_madd", preproc );
	Layer@ layer = createDefaultLayer( pipe, geom, CULL_NONE, DEFAULT_BLEND_ADD, DEPTH_PASS_ONLY );

	beginTest( "MADD Latency (" + innerLoop + "x)" );
	clear();
	renderLayer( layer, int(numLayers) );
	endTest();
	
	writeResult( "nanoseconds", (getLastTestTime() * 1000.0 * 1000.0 * 1000.0 / getLastTestNumFrames()) / (innerLoop*numLayers*1000.0) );  
}

void power_test()
{
        int loop_times = 10;
        int draw_num = 100;
	Texture@ smallTex = generateRandomTexture( 16, 16, true, DATA_FORMAT_R8G8B8A8_UNORM );
	Pipeline@ pipeline = createPipelineFromFile( "power_test", "power_test" );

	int width, height;
	getResolution( width, height );

	Geometry@ g0 = createFullscreen(ATTRIBUTE_POSITION3, 2, DATA_FORMAT_R32G32_FLOAT, false);
	beginTest( "power test" );

        for(int i=0;i<loop_times;i++)
	{
	    clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	    renderLayer( createDefaultLayer( pipeline, g0, CULL_NONE, DEFAULT_BLEND_ALPHA, DEPTH_TEST_WRITE, smallTex,smallTex) , draw_num );
	}
	endTest();
	writeResult("pixel num", getLastTestNumPixels());
}
