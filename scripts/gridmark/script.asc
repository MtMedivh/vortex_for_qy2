#include "script.inc"

void main()
{
	pushGroup( "Standard" );
		gameScene();
		cachedPolygonThroughput();
		visiblePixelFillrate();
		depthTestFillrate();
		effectivePixelFillrate();
		lightingWithCachedVertices();
		peakPolygonThroughput();
		/*
		peakDegeneratePolygonThroughput();	// not in default Gridmark
		advancedShaderTest();				// unsupported due to undefined behaviour
		*/
	popGroup();
	pushGroup( "Extended" );
		peakCulledTriangleStrips();
		sgxxtPeakGflops();
		sgxPeakGflops();
		roguePeakGflops();
		roguePeakGflopsFp16();
		basicVec4Madd();
		peakBinnedTriangleStrip();
	popGroup();
}

void gameScene()
{ 
	Texture@ t0 = createTexture( "splash_pvrtc4.pvr" );
	Pipeline@ pipeline = createPipelineFromFile( "shader_2tex", "shader_2tex" );

	Geometry@ g0 = createGeometry(ATTRIBUTE_POSITION3 | ATTRIBUTE_PADDING_POSITION | ATTRIBUTE_TEXCOORD_FLIP, 2, DATA_FORMAT_R32G32_FLOAT, false);
	g0.addQuad( GEOMETRY_LIST, 0.0f, 0.0f, 1.0f, 1.0f, 33, 25 );

	beginTest( "Gridmark bench 0 - Game Scene" );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	for(int i = 0; i < 6; i++)
	{
    	// Alternating back-face culling (but front-only polygons so not actually culling anything as per GridMark...)
		renderLayer( createDefaultLayer( pipeline, g0, (i%2 == 1 ? CULL_FRONT : CULL_NONE), DEFAULT_BLEND_OPAQUE, DEPTH_TEST_WRITE, t0, t0 ) );
	}
	renderLayer( createDefaultLayer( pipeline, g0, CULL_NONE, DEFAULT_BLEND_ALPHA, DEPTH_PASS_ONLY, t0, t0 ) );

	endTest();
	writeResult("mega_pixels_per_second", 5.0 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0));
	writeResult("visible_mega_pixels_per_second", 2.0 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0));
}

void cachedPolygonThroughput()
{
	Geometry@ g0 = createGeometry( ATTRIBUTE_POSITION3 | ATTRIBUTE_PADDING_POSITION, 0, DATA_FORMAT_R32G32_FLOAT, false );
	g0.addQuad( GEOMETRY_TUBE_GRIDMARK, 0.0f, 0.0f, 1.0f, 1.0f, 252, 120 );

	beginTest( "Gridmark bench 1 - Cached Polygon Throughput" );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( "shader_green", g0, CULL_FRONT ), 4 );

	endTest();
	writeResult("total_mega_tris_per_second", 4.0 * g0.getNumTotalTriangles() * getLastTestFPS() / (1000.0 * 1000.0));
	writeResult("binned_mega_tris_per_second", 4.0 * g0.getNumFrontTriangles() * getLastTestFPS() / (1000.0 * 1000.0));
}

void visiblePixelFillrate()
{
	Texture@ t0 = createTexture( "splash_pvrtc4.pvr" );
	Geometry@ g0 = createFullscreen(ATTRIBUTE_POSITION3 | ATTRIBUTE_PADDING_POSITION, 1, DATA_FORMAT_R32G32_FLOAT, false);

	beginTest( "Gridmark bench 2 - Visible Pixel Fillrate" );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( "shader_1tex", g0, CULL_NONE, DEFAULT_BLEND_ADD, DEPTH_TEST_ONLY, t0 ), 8 );

	endTest();
	writeResult("mega_pixels_per_second", 9.0 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0));
	writeResult("mega_pixels_per_second_without_clear", 8.0 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0));
}


void depthTestFillrate()
{
	Texture@ t0 = createTexture( "splash_pvrtc4.pvr" );
	Geometry@ g0 = createFullscreen(ATTRIBUTE_POSITION3 | ATTRIBUTE_PADDING_POSITION, 1, DATA_FORMAT_R32G32_FLOAT, false);
	
	beginTest( "Gridmark bench 3 - Depth Test Fillrate" );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( "shader_1tex", g0, CULL_NONE, DEFAULT_BLEND_OPAQUE, DEPTH_TEST_WRITE, t0 ), 40 );

	endTest();
	writeResult("mega_pixels_per_second", 41.0 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0));
	writeResult("mega_pixels_per_second_without_clear", 40.0 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0));
}

void effectivePixelFillrate()
{
	Texture@ t0 = createTexture( "splash_pvrtc4_64x64.pvr" );
	Pipeline@ pipeline = createPipelineFromFile( "shader_1tex", "shader_1tex" );

	beginTest( "Gridmark bench 5 - Effective Pixel Fillrate" );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );

	for( int32 i = 0; i < 3; i++ )
	{
		Geometry@ g = createGeometry(ATTRIBUTE_POSITION3 | ATTRIBUTE_PADDING_POSITION, 1, DATA_FORMAT_R32G32_FLOAT, false);
		float z = float( i+1 ) * 0.1f;
		g.addFullscreenTriangle( z, 2.0f );

		renderLayer( createDefaultLayer( pipeline, g, CULL_NONE, DEFAULT_BLEND_OPAQUE, DEPTH_TEST_WRITE, t0 ) );
	}

	for( int32 i = 0; i < 9; i++ )
	{
		Geometry@ g = createGeometry(ATTRIBUTE_POSITION3 | ATTRIBUTE_PADDING_POSITION, 1, DATA_FORMAT_R32G32_FLOAT, false);
		float z = float( 7 + i%3 ) * 0.01f + float( int32(i/3) ) * 0.1f;
		g.addFullscreenTriangle( z, 2.0f );

		renderLayer( createDefaultLayer( pipeline, g, CULL_NONE, DEFAULT_BLEND_ALPHA, DEPTH_TEST_ONLY, t0 ) );
	}
	
	endTest();
	writeResult("mega_pixels_per_second", 13.0 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0));
}

void lightingWithCachedVertices()
{
	Geometry@ g0 = createGeometry(ATTRIBUTE_POSITION3 | ATTRIBUTE_PADDING_POSITION, 0, DATA_FORMAT_R32G32_FLOAT, false);
	g0.addQuad( GEOMETRY_TUBE_GRIDMARK, 0.0f, 0.0f, 1.0f, 1.0f, 100, 102, 0.5f, 0, 1 );

	Layer@ opaqueLayer = createDefaultLayer( "shader_lighting", g0, CULL_FRONT );
	
	ConstantBuffer @cb0 = createConstantBuffer( 5 );
	cb0.set( 0, 0.f, 0.f, 1.f, 0.f ); // vLightPos0
	cb0.set( 1, 0.2f, 0.f, 1.f, 0.f ); // vLightPos1
	cb0.set( 2, 0.34482f, 0.f, 0.86207f, 0.f ); // vLightDir2
	cb0.set( 3, 0.44118f, 0.f, 0.73529f, 0.f ); // vLightDir3
	cb0.set( 4, 0.f, 0.f, 10.f, 0.f ); // vCameraPos
	opaqueLayer.attachVSConstantBuffer( 0, cb0 );

	beginTest( "Gridmark bench 6 - Lighting with Cached Vertices" );
	
	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( opaqueLayer, 2 );
	
	endTest();
	
	writeResult("total_mega_tris_per_second", 2.0 * g0.getNumTotalTriangles() * getLastTestFPS() / (1000.0 * 1000.0));
	writeResult("binned_mega_tris_per_second", 2.0 * g0.getNumFrontTriangles() * getLastTestFPS() / (1000.0 * 1000.0));
	writeResult("gflops_per_second", 2.0 * 149.0 * 27200.0 * getLastTestFPS() / (1000.0 * 1000.0 * 1000.0));
}

void peakPolygonThroughput()
{
	Geometry@ g0 = createGeometry(ATTRIBUTE_POSITION3 | ATTRIBUTE_PADDING_POSITION, 0, DATA_FORMAT_R32G32_FLOAT, false);
	g0.addQuad( GEOMETRY_TUBE_GRIDMARK, 0.0f, 0.0f, 1.0f, 2.0f, 252, 120, 0.5f, 0, 4 );

	beginTest( "Gridmark bench 7 - Peak Polygon Throughput" );

	clear();
	renderLayer( createDefaultLayer( "shader_green", g0, CULL_FRONT ), 4 );

	endTest();
	writeResult("total_mega_tris_per_second", 4.0 * g0.getNumTotalTriangles() * getLastTestFPS() / (1000.0 * 1000.0));
	writeResult("binned_mega_tris_per_second", 2.0 * g0.getNumFrontTriangles() * getLastTestFPS() / (1000.0 * 1000.0));
}

void peakDegeneratePolygonThroughput()
{
	// Note: GridMark uses tube indices but this is irrelevant as the index buffers are still identical
	Geometry@ g0 = createGeometry(ATTRIBUTE_POSITION3 | ATTRIBUTE_PADDING_POSITION, 0, DATA_FORMAT_R32G32_FLOAT, false);
	g0.addQuad( GEOMETRY_LIST_DEGENERATE, 0.0f, 0.0f, 1.0f, 1.0f, 252, 120, 0.5f, 0, 4 );

	beginTest( "Gridmark bench 8 - Peak Degenerate Polygon Throughput" );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( "shader_green", g0, CULL_FRONT ), 4 );

	endTest();
	writeResult("degenerate_mega_tris_per_second", 4.0 * g0.getNumTotalTriangles() * getLastTestFPS() / (1000.0 * 1000.0));
	writeResult("valid_mega_tris_per_second", 0.0);
}

void advancedShaderTest()
{
	Texture@ t0 = createTexture( "splash_8888.pvr" );

	Geometry@ g0 = createGeometry(ATTRIBUTE_POSITION3 | ATTRIBUTE_PADDING_POSITION, 1, DATA_FORMAT_R32G32_FLOAT, false);
	g0.addQuad( GEOMETRY_LIST, 0.0f, 0.0f, 1.0f, 1.0f, 1, 1, 0.5f, 0, 1 );

	Layer@ opaqueLayer = createDefaultLayer( "shader_advanced", g0, CULL_NONE, DEFAULT_BLEND_OPAQUE, DEPTH_TEST_WRITE, t0, t0 );

	//	Original Gridmark relied on uninitialized uniforms in this test. 
	//	These are the values retrieved on a "correct" platform using glGetUniform
	ConstantBuffer @cb0 = createConstantBuffer( 6 );
	cb0.set( 0, 0.f, 0.f, 10.f, 1.f ); // Cs
	cb0.set( 1, 0.f, 0.f, 10.f, 1.f ); // Cvn
	cb0.set( 2, 0.f, 0.f, 0.f, 0.f ); // LColorA row0
	cb0.set( 3, 0.f, 0.f, 0.f, 0.f ); // LColorA row1
	cb0.set( 4, 0.f, 0.f, 0.f, 0.f ); // LColorA row2
	cb0.set( 5, 0.f, 0.f, 0.f, 0.f ); // r
	opaqueLayer.attachPSConstantBuffer( 0, cb0 );

	beginTest( "Gridmark bench 9 - Shader Test" );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( opaqueLayer );

	endTest();
	writeResult("gflops_per_second", 213.0 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0 * 1000.0));
}

void peakCulledTriangleStrips()
{
	Geometry@ g0 = createGeometry(ATTRIBUTE_POSITION3 | ATTRIBUTE_PADDING_POSITION, 0, DATA_FORMAT_R32G32_FLOAT, false);
	g0.addQuad( GEOMETRY_STRIP, 0.0f, 0.0f, 1.0f, 1.0f, 252, 120 );
	
	beginTest( "Gridmark bench 10 - Peak Culled Triangle Strips" );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( "shader_green", g0, CULL_FRONT ), 16 );

	endTest();
	writeResult("total_mega_tris_per_second", 16.0 * g0.getNumTotalTriangles() * getLastTestFPS() / (1000.0 * 1000.0));
	writeResult("valid_mega_tris_per_second", 16.0 * g0.getNumFrontTriangles() * getLastTestFPS() / (1000.0 * 1000.0));
	writeResult("binned_mega_tris_per_second", 0.0);
}

void sgxxtPeakGflops()
{
	beginTest( "Gridmark bench 11 - SGX-XT Peak GFlops (Dual issue)" );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( "shader_bench11", createFullscreenQuad(ATTRIBUTE_POSITION4, 2), CULL_NONE ) );

	endTest();
	writeResult("gflops_per_second", 900.0 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0 * 1000.0));
}

void sgxPeakGflops()
{
	beginTest( "Gridmark bench 12 - SGX Peak GFlops" );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( "shader_bench12", createFullscreenQuad(ATTRIBUTE_POSITION4, 2), CULL_NONE ) );

	endTest();
	writeResult("gflops_per_second", 800.0 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0 * 1000.0));
}

void roguePeakGflops()
{
	beginTest( "Gridmark bench 13 - Rogue Peak GFlops" );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( "shader_bench13", createFullscreenQuad(ATTRIBUTE_POSITION4, 1), CULL_NONE ) );

	endTest();
	writeResult("gflops_per_second", 1600.0 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0 * 1000.0));
}

void roguePeakGflopsFp16()
{
	// D3D11 9.3 not supported because of number of instructions
	if( getAPI()=="D3D11" && getFeatureLevel() == "9_3" )
	{
		trace("Warning: Test 14 not supported in D3D11-9.3");
		return;
	}	

	beginTest( "Gridmark bench 14 - Rogue Peak GFlops FP16" );
	
	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( "shader_bench14", createFullscreenQuad(ATTRIBUTE_POSITION4, 2), CULL_NONE ) );

	endTest();
	writeResult("gflops_per_second", 2400.0 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0 * 1000.0));
}

void basicVec4Madd()
{
	beginTest( "Gridmark bench 15 - Basic Vec4 MADD" );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( "shader_bench15", createFullscreenQuad(ATTRIBUTE_POSITION4, 2), CULL_NONE ) );

	endTest();
	writeResult("gflops_per_second", 800.0 * getLastTestNumPixels() * getLastTestFPS() / (1000.0 * 1000.0 * 1000.0));
}

void peakBinnedTriangleStrip()
{
	Geometry@ g0 = createGeometry(ATTRIBUTE_POSITION3 | ATTRIBUTE_PADDING_POSITION, 0, DATA_FORMAT_R32G32_FLOAT, false);
	g0.addQuad( GEOMETRY_STRIP, 0.0f, 0.0f, 1.0f, 1.0f, 252, 120 );
	
	beginTest( "Gridmark bench 16 - Peak Binned Triangle Strip" );

	clear( 0.4f, 0.1f, 0.4f, 1.f, CLEAR_FLAGS_DEPTH | CLEAR_FLAGS_STENCIL, 1.f, 0 );
	renderLayer( createDefaultLayer( "shader_green", g0, CULL_NONE ), 16 );

	endTest();
	writeResult("total_mega_tris_per_second", 16.0 * g0.getNumTotalTriangles() * getLastTestFPS() / (1000.0 * 1000.0));
	writeResult("valid_mega_tris_per_second", 16.0 * g0.getNumFrontTriangles() * getLastTestFPS() / (1000.0 * 1000.0));
	writeResult("binned_mega_tris_per_second", 16.0 * g0.getNumFrontTriangles() * getLastTestFPS() / (1000.0 * 1000.0));
}
